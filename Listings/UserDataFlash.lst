C51 COMPILER V9.56.0.0   USERDATAFLASH                                                     10/29/2018 10:31:11 PAGE 1   


C51 COMPILER V9.56.0.0, COMPILATION OF MODULE USERDATAFLASH
OBJECT MODULE PLACED IN .\Objects\UserDataFlash.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE UserDataFlash.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Include) DEFINE(
                    -FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\Listings\UserDataFlash.lst) OBJECT(.\Objects\UserDataFlash.obj)

line level    source

   1          /*******************************************************************************
   2          1. Project Name     : 
   3          2. Author               : 
   4          3. Company              : 
   5          4. A Drafter        : Christopher, Lee ( DongSeok, Lee )
   6          5. Homepage             : 
   7          6. Email                : strchrislee@gmail.com
   8          7. Phone Number     : 010-2464-0102
   9          8. Filename             : UserQueue.c
  10          9. Version              : 1.0
  11          10. CreatedDate     : 2017/03/30
  12          11. ModifiedDate        : 
  13          12. License             : Heumtech
  14          13. MCU Type        :
  15          14. Clock Frequency : 
  16          15. Add Source Name :
  17          16. Compiler        : 
  18          17. SubMenu             :
  19          *******************************************************************************/
  20          //Defined Device Header
  21          #include <stdio.h>
  22          #include "N76E003.h"
  23          #include "Common.h"
  24          #include "Delay.h"
  25          #include "SFR_Macro.h"
  26          #include "Function_define.h"
  27          
  28          //Defined User Header
  29          #include "UserDataFlash.h"
  30          #include "UserDefine.h"
  31          
  32          static bit BIT_TMP;
  33          
  34          //Define variables
  35          //DataFlash_t  DataFlash;   
  36          
  37          /*
  38          #define BASE_ADDR   0x4700
  39          
  40          #define FLASH_CALIBRATION_L_LOW     BASE_ADDR+1     //저감도 캘리브레이션 LOW BYTE
  41          #define FLASH_CALIBRATION_L_HIGH    BASE_ADDR+1     //저감도 캘리브레이션 HIGH BYTE
  42          #define FLASH_CALIBRATION_H_LOW     BASE_ADDR+3     //저감도 캘리브레이션 LOW BYTE
  43          #define FLASH_CALIBRATION_H_HIGH    BASE_ADDR+4     //저감도 캘리브레이션 HIGH BYTE
  44          */
  45          
  46          
  47          /*----------------------------------------------------------------------*/
  48          /*Dataflash use APROM area, please ALWAYS care the address of you code  */
  49          /*APROM 0x3800~0x38FF demo as dataflash                                                         */
  50          /*Please use Memory window key in C:0x3800 to check earse result                */
  51          /*----------------------------------------------------------------------*/
  52          
  53          /*********************************************************************************************************
             -*********/
C51 COMPILER V9.56.0.0   USERDATAFLASH                                                     10/29/2018 10:31:11 PAGE 2   

  54          /*write_DATAFLASH_BYTE :*/
  55          /*user can copy all this subroutine into project, then call this function in main.*/
  56          /*********************************************************************************************************
             -*********/
  57          void Write_Dataflash_Byte(UINT16 u16_addr,UINT8 u8_data){
  58   1              UINT8 looptmp=0,u8_addrl_r;
  59   1              unsigned char code *cd_longaddr;
  60   1              unsigned char xdata *xd_tmp;
  61   1              
  62   1      //Check page start address
  63   1              u8_addrl_r = u16_addr;
  64   1              if (u8_addrl_r<0x80){
  65   2                      u8_addrl_r = 0;
  66   2              }
  67   1              else {
  68   2                      u8_addrl_r = 0x80;
  69   2              }
  70   1      //Save APROM data to XRAM
  71   1              xd_tmp = 0x80;
  72   1              cd_longaddr = (u16_addr&0xff00)+u8_addrl_r;     
  73   1              while (xd_tmp !=0x100){
  74   2                      *xd_tmp = *cd_longaddr;
  75   2                      looptmp++;
  76   2                      xd_tmp++;
  77   2                      cd_longaddr++;
  78   2              }
  79   1      
  80   1      // Modify customer data in XRAM
  81   1              u8_addrl_r = u16_addr;
  82   1              if (u8_addrl_r<0x80){
  83   2                      xd_tmp = u8_addrl_r+0x80;
  84   2              }
  85   1              else{
  86   2                      xd_tmp = u8_addrl_r+0;
  87   2              }
  88   1              *xd_tmp = u8_data;
  89   1      
  90   1      //Erase APROM DATAFLASH page
  91   1                      IAPAL = u16_addr;
  92   1                      IAPAH = u16_addr>>8;
  93   1                      IAPFD = 0xFF;
  94   1                      set_IAPEN; 
  95   1                      set_APUEN;
  96   1                      IAPCN = 0x22;           
  97   1                      set_IAPGO; 
  98   1      
  99   1      //Save changed RAM data to APROM DATAFLASH
 100   1              u8_addrl_r = u16_addr;
 101   1              if (u8_addrl_r<0x80){
 102   2                      u8_addrl_r =0;
 103   2              }
 104   1              else{
 105   2                      u8_addrl_r = 0x80;
 106   2              }
 107   1          xd_tmp = 0x80;
 108   1          IAPAL = u8_addrl_r;
 109   1          IAPAH = u16_addr>>8;
 110   1          set_IAPEN; 
 111   1          set_APUEN;
 112   1          IAPCN = 0x21;
 113   1          while (xd_tmp !=0xFF){
 114   2              IAPFD = *xd_tmp;
C51 COMPILER V9.56.0.0   USERDATAFLASH                                                     10/29/2018 10:31:11 PAGE 3   

 115   2              set_IAPGO;
 116   2              IAPAL++;
 117   2              xd_tmp++;
 118   2          }
 119   1          clr_APUEN;
 120   1          clr_IAPEN;
 121   1      }
 122          
 123          //============================================================================
 124          // Function Name:
 125          // Description:
 126          // input: none
 127          // output: none
 128          //============================================================================
 129          void DataFlash_Erase(uint16_t   u16Addr){
 130   1              IAPAL = u16Addr;
 131   1                      IAPAH = u16Addr>>8;
 132   1                      IAPFD = 0xFF;
 133   1                      set_IAPEN; 
 134   1                      set_APUEN;
 135   1                      IAPCN = 0x22;           
 136   1                      set_IAPGO; 
 137   1      }
 138          
 139          //============================================================================
 140          // Function Name:
 141          // Description:
 142          // input: none
 143          // output: none
 144          //============================================================================
 145          UINT8 read_APROM_BYTE(UINT16 code *u16_addr)
 146          {
 147   1              UINT8 rdata;
 148   1              rdata = *u16_addr>>8;
 149   1              return rdata;
 150   1      }
 151          
 152          //============================================================================
 153          // Function Name:
 154          // Description:
 155          // input: none
 156          // output: none
 157          //============================================================================
 158          void Set_Dust_Data(UINT16 u16_addr,UINT8 u8_data){
 159   1          Write_Dataflash_Byte(u16_addr,u8_data);
 160   1      }
 161          
 162          //============================================================================
 163          // Function Name:
 164          // Description:
 165          // input: none
 166          // output: none
 167          //============================================================================
 168          void Get_Dust_Cal_Data(uint16_t *u16Buff, uint8_t u8DataType){
 169   1          if (u8DataType==0) {
 170   2              *u16Buff = (read_APROM_BYTE(FLASH_CALIBRATION_L_HIGH)<<8) + read_APROM_BYTE(FLASH_CALIBRATION_L_LO
             -W);
 171   2          }else if (u8DataType==1){
 172   2              *u16Buff = (read_APROM_BYTE(FLASH_CALIBRATION_H_HIGH)<<8) + read_APROM_BYTE(FLASH_CALIBRATION_H_LO
             -W);
 173   2          }
 174   1      
C51 COMPILER V9.56.0.0   USERDATAFLASH                                                     10/29/2018 10:31:11 PAGE 4   

 175   1      }
 176          
 177          //============================================================================
 178          // Function Name:
 179          // Description:
 180          // input: none
 181          // output: none
 182          //============================================================================
 183          // void DataFlash_WriteByte(uint16_t   u16Addr){
 184          //     //Save changed RAM data to APROM DATAFLASH
 185          //     u8_addrl_r = u16_addr;
 186          //     if (u8_addrl_r<0x80){
 187          //         u8_addrl_r =0;
 188          //     }
 189          //     else{
 190          //         u8_addrl_r = 0x80;
 191          //     }
 192          //     xd_tmp = 0x80;
 193          //     IAPAL = u8_addrl_r;
 194          //     IAPAH = u16_addr>>8;
 195          //     set_IAPEN; 
 196          //     set_APUEN;
 197          //     IAPCN = 0x21;
 198          //     while (xd_tmp !=0xFF){
 199          //     IAPFD = *xd_tmp;
 200          //     set_IAPGO;
 201          //     IAPAL++;
 202          //     xd_tmp++;
 203          //     }
 204          //     clr_APUEN;
 205          //     clr_IAPEN; 
 206          // }
 207          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    502    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       7
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
